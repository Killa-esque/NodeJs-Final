<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Tìm kiếm Sản phẩm và Khách hàng</title>
  <!-- Liên kết đến tệp CSS Bootstrap qua CDN -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
  <div class="container-fluid mt-5">
    <div class="row">
      <!-- Phần tìm kiếm và hiển thị Sản phẩm (bên trái) -->
      <div class="col-md-8">
        <h2>Tìm kiếm Sản phẩm</h2>
        <input type="text" class="form-control" placeholder="Nhập tên sản phẩm" id="productSearchInput" oninput="searchProduct(this.value)">
        <span id="productSearchResults" style="position: absolute; z-index: 1;"></span>

        <div id="cart"></div>
    
        <div class="mt-4">
            <div class="d-flex justify-content-between">
                <h4>Tổng số tiền:</h4>
                <span id="totalAmount"></span>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-2">
                <label for="discount">Giảm giá (%):</label>
                <input type="number" id="discount" class="form-control w-25" placeholder="0" oninput="calculateFinalAmount()">
            </div>
            <div class="d-flex justify-content-between mt-2">
                <h4>Khách cần trả:</h4>
                <span id="finalAmount"></span>
            </div>
        </div>
    </div>
    

      
      


      <!-- Phần tìm kiếm và hiển thị Khách hàng (bên phải) -->
      <div class="col-md-4">
        <h2>Tìm kiếm Khách hàng</h2>

        <!-- Ô tìm kiếm khách hàng -->
        <input type="number" inputmode="numeric" class="form-control" placeholder="Nhập số điện thoại khách hàng" id="customerSearchInput" oninput="searchCustomer(this.value)">
        <span id="customerSearchResults" style="position: absolute; z-index: 1;"></span>


        <!-- Dữ liệu khách hàng -->
        <div class="card">
          <div class="card-body">
            <div class="form-group">
              <label for="phoneNumber">Số điện thoại</label>
              <input type="text" class="form-control" id="phoneNumber">
            </div>

            <div class="form-group">
              <label for="fullName">Họ và tên</label>
              <input type="text" class="form-control" id="fullName">
            </div>

            <div class="form-group">
              <label for="address">Địa chỉ</label>
              <input type="text" class="form-control" id="address">
            </div>
          </div>
        </div>

        <!-- Thông tin thanh toán bên dưới card khách hàng -->

        
        <div class="form-group">
          <div class="row">
            <div class="col">
              <label for="amountReceived">Tiền đã nhận</label>
            </div>
            <div class="col">
              <input type="text" class="form-control" id="amountReceived">
            </div>
          </div>
        </div>
        
        <div class="form-group">
          <div class="row">
            <div class="col">
              <label for="changeAmount">Tiền thừa trả lại</label>
            </div>
            <div class="col">
              <input type="text" class="form-control" id="changeAmount">
            </div>
          </div>
        </div>

        <div class="form-group mt-3">
          <div class="d-grid">
            <button class="btn btn-success" id="checkoutButton">Thanh Toán</button>
          </div>
        </div>
        

        
      </div>
    </div>
  </div>

  <!-- Liên kết đến tệp JavaScript Bootstrap qua CDN (tùy chọn) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script>
    const productSearchInput = document.getElementById("productSearchInput");
    const productSearchResults = document.getElementById("productSearchResults");
    const customerSearchInput = document.getElementById("customerSearchInput");
    const customerSearchResults = document.getElementById("customerSearchResults");
    const totalAmountEl = document.getElementById('totalAmount');
    const discountInput = document.getElementById('discount');
    const finalAmountEl = document.getElementById('finalAmount');
    const cartDiv = document.getElementById('cart');
    const phoneNumber = document.getElementById('phoneNumber');
    const fullName = document.getElementById('fullName');
    const address = document.getElementById('address');
    const checkoutButton = document.getElementById('checkoutButton');
    const amountReceived = document.getElementById('amountReceived')
    const changeAmount = document.getElementById('changeAmount')

    var cartItemIds = [];
    var customerId_;


    window.onload = function() {
      productSearchResults.style.width = productSearchInput.clientWidth + "px"
      customerSearchResults.style.width = customerSearchInput.clientWidth + "px"
      fetch(`/cart/get`)
      .then(response => response.json())
      .then(data => {
        displayCart(data)
      })
      
    };
    // Search Product
    function searchProduct(value) {
        if (!value) {
          productSearchResults.innerHTML = "";
        } else {
          fetch(`/product/search?query=${value}`)
            .then(response => response.json())
            .then(data => {
                displaySearchResults(data, value);
            })
            .catch(error => {
                console.error("Lỗi khi tải dữ liệu sản phẩm:", error);
            });
        }
    }
    
    function makeMatchingLettersBold(string, query) {
    const regex = new RegExp(`(${query})`, 'gi');
    return string.replace(regex, '<b>$1</b>');
}

    function displaySearchResults(results, query) {
        // Xóa kết quả tìm kiếm cũ
        productSearchResults.innerHTML = "";

        var html = '<ul class="list-group">';
        if (results.length > 0) {
          results.forEach(product => {
              productText = makeMatchingLettersBold(product.productName, query)
              html += `<li class="list-group-item list-group-item-action" onclick="add('${product._id}')">
                  ${productText}<br>${product.barcode}
              </li>`;
          });
        } else {
          html += '<a href="#" class="list-group-item list-group-item-action disabled">Không tìm thấy sản phẩm nào.</a>';
        }
          html += '</ul>';
          productSearchResults.innerHTML = html
    }

    //Search Customer
    function searchCustomer(value) {
        if (!value) {
          customerSearchResults.innerHTML = "";
        } else {
          fetch(`/customer/search?query=${value}`)
            .then(response => response.json())
            .then(data => {
                displaySearchResults2(data, value);
            })
            .catch(error => {
                console.error("Lỗi khi tải dữ liệu sản phẩm:", error);
            });
        }
    }

    function displaySearchResults2(results, query) {
        // Xóa kết quả tìm kiếm cũ
        customerSearchResults.innerHTML = "";

        var html = '<ul class="list-group">';
        if (results.length > 0) {
          results.forEach(customer => {
              phoneText = makeMatchingLettersBold(customer.phoneNumber, query)
              html += `<li class="list-group-item list-group-item-action" onclick="addCustomer('${customer.phoneNumber}')"" >
                  ${phoneText}<br>${customer.fullName}
              </li>`;
          });
        } else {
          html += '<a href="#" class="list-group-item list-group-item-action disabled ">Không tìm thấy (Bấm vào để thêm mới SĐT).</a>';
        }
          html += '</ul>';
          customerSearchResults.innerHTML = html
    }

    function addCustomer(phone) {
      customerSearchInput.value = "";
      customerSearchResults.innerHTML = "";
      fetch(`/customer/getByPhone?phone=${phone}`)
            .then(response => response.json())
            .then(data => {
                saleId = data._id
                phoneNumber.value = data.phoneNumber;
                fullName.value = data.fullName;
                address.value = data.address;
            })
            .catch(error => {
                console.error("Lỗi khi tải dữ liệu sản phẩm:", error);
            });
    }

    async function fetchDataCart(productID) {
        try {
            const addProduct = await fetch(`/cart/addProduct/${productID}`, {method: "POST"});
            const cart = await fetch(`/cart/get`)
            const data = await cart.json()
            displayCart(data)
        } catch (error) {
            console.error(error);
        }
    }

    function add(productID) {
        productSearchInput.value = "";
        productSearchResults.innerHTML = "";
        fetchDataCart(productID);

    }



    function calculateFinalAmount() {
    const totalAmount = parseFloat(totalAmountEl.textContent.replace('$', ''));
    const discount = parseFloat(discountInput.value) || 0;

    const discountedAmount = (totalAmount * discount) / 100;
    const finalAmount = totalAmount - discountedAmount;

    finalAmountEl.textContent = `$${finalAmount.toFixed(2)}`;
}

function updateTotalAmount(data) {
    // Calculate the total amount
    let totalAmount = 0;
    data.forEach(item => {
        totalAmount += item.retailPrice * item.quantity;
    });

    // Display the total amount
    totalAmountEl.textContent = `$${totalAmount.toFixed(2)}`;
}

function displayCart(data) {
    // Empty out the current contents of the cart
    cartDiv.innerHTML = '';

    const listGroup = document.createElement('div');
    listGroup.className = 'list-group';
    listGroup.style.maxHeight = '360px';  // Assuming an average height of 60px per item
    listGroup.style.overflowY = 'auto';  // Add vertical scroll when items exceed max height
    
    let totalAmount = 0;
    data.forEach(item => {
        cartItemIds.push(item.cartItemId)
        totalAmount += item.retailPrice * item.quantity;

        const listItem = document.createElement('div');
        listItem.className = 'list-group-item d-flex justify-content-between align-items-center';

        // Div Product Name và Quantity
        const nameQuantityDiv = document.createElement('div');
        // Product Name
        const productName = document.createElement('h5');
        productName.textContent = item.productName;
        nameQuantityDiv.appendChild(productName);
        // Quantity Input
        const quantityLabel = document.createElement('label');
        quantityLabel.textContent = 'Quantity: ';
        const quantityInput = document.createElement('input');
        quantityInput.type = 'number';
        quantityInput.className = 'form-control ml-2 d-inline-block';
        quantityInput.value = item.quantity;
        quantityInput.min = 1;
        quantityInput.style.width = '80px';
        quantityLabel.appendChild(quantityInput);

        nameQuantityDiv.appendChild(quantityLabel);
        listItem.appendChild(nameQuantityDiv);
        
        // Retail Price
        const retailPrice = document.createElement('div');
        retailPrice.textContent = `Price: $${item.retailPrice}`;
        listItem.appendChild(retailPrice);

        // Total
        const totalDiv = document.createElement('div');
        totalDiv.style.fontWeight = 'bold';
        totalDiv.textContent = `Total: $${item.retailPrice * item.quantity}`;
        totalDiv.className = 'ml-2 d-block'; // Space between price and total, and display as block to move it below the price
        listItem.appendChild(totalDiv);

        // Delete button
        const deleteDiv = document.createElement('div');
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'btn btn-danger form-control ml-2 d-inline-block';
        deleteBtn.textContent = 'Delete';
        deleteBtn.onclick = async () => {
        try {
            const response = await fetch(`/cart/delete?cartItemId=${item.cartItemId}`, {
                method: 'DELETE'
            });
            
            // Check if delete was successful
            if (response.ok) {
                // Remove the product from our local data array
                const index = data.findIndex(p => p.cartItemId === item.cartItemId);
                // index sẽ trả về -1 nếu không tìm thấy
                if (index !== -1) {
                    data.splice(index, 1);
                }
                
                // Re-calculate and update the total
                updateTotalAmount(data);
                calculateFinalAmount();

                // Remove the product from the display
                listItem.remove();
            } else {
                console.error('Failed to delete product.');
            }
        } catch (error) {
            console.error(error);
        }
    };
        deleteDiv.appendChild(deleteBtn);
        listItem.appendChild(deleteDiv);
        
        //Update quantity
        quantityInput.addEventListener('change', async function() {
        const newQuantity = parseInt(this.value);
        try {
            const response = await fetch(`/cart/edit?cartItemId=${item.cartItemId}&quantity=${newQuantity}`, {
                method: 'PUT'
            });
            if (response.ok) {
                // const updatedCartItem = await response.json();
                const updatedCart = await fetch(`/cart/get`)
                const updatedProduct = await updatedCart.json()
                console.log(updatedProduct)

                // Update the product in our local data array
                const index = data.findIndex(p => p.cartItemId === item.cartItemId);
                console.log(index)
                if (index !== -1) {
                    data[index] = updatedProduct[index];
                }
                // Update the displayed total for the product
                totalDiv.textContent = `Total: $${updatedProduct[index].retailPrice * updatedProduct[index].quantity}`;

                // Re-calculate and update the overall total
                updateTotalAmount(data);
                calculateFinalAmount();
            } else {
                console.error('Failed to update product quantity.');
            }
        } catch (error) {
            console.error(error);
        }
    });

        listGroup.appendChild(listItem);
    });

    cartDiv.appendChild(listGroup);

    // Display the total amount
    totalAmountEl.textContent = `$${totalAmount.toFixed(2)}`;

    // Calculate the final amount based on the current discount
    updateTotalAmount(data);
    calculateFinalAmount();
}
  checkoutButton.addEventListener('click', function() {
    const data = {
      customerId: customerId_,
      cartItemIds: cartItemIds,
      totalAmount: totalAmountEl.value,
      moneyReceived: amountReceived.value,
      moneyBack: changeAmount.value
    };

    fetch('order/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Yêu cầu không thành công');
      }
      return response.json();
    })
    .then(data => {
      console.log('Thành công:', data);
    })
    .catch((error) => {
      console.error('Có lỗi xảy ra:', error);
    });
  });


</script>
</body>
</html>
